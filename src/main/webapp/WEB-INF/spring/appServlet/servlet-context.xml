<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xmlns:beans="http://www.springframework.org/schema/beans"
			 xmlns:context="http://www.springframework.org/schema/context"
			 xmlns:mvc="http://www.springframework.org/schema/mvc"
			 xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/**" location="/resources/" />

	<!-- ViewNameResolver설정(Resolver분기) 1) BeanNameViewResolver 2) jsonView 설정 -->
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="1" />
	</beans:bean>
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- Image Upload(MultiPart Resolver 설정) -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="-1" />
	</beans:bean>

	<!-- ImageDownLoad Resolver -->
	<!-- => 다운로드를 처리할 ViewResolver 클래스 등록(DownloadView 직접만들기) => id="downloadView" 와  컨트롤러의 매핑메서드에서 리턴된 view name 과 같아야 한다. -->
	<beans:bean id="downloadView" class="com.green.meal.download.DownloadView" />

	<!--	에러메시지등록-->
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<beans:property name="basenames">
			<beans:list>
				<beans:value>error_message</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="defaultEncoding" value="UTF-8"></beans:property>
	</beans:bean>

	<beans:bean id="loginInterceptor" class="com.green.meal.LoginInterceptor" />
	<beans:bean id="AdminloginInterceptor" class="com.green.meal.AdminLoginInterceptor" />
	<!--
        2) url 과 인터셉터 설정
        => Namespaces 에서 mvc 확인 ,
        => mvc 사용하면 위에 있는 다음 2 Tag 수정 필요함
               <mvc:annotation-driven  ,  <mvc:resources
    -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/update/**" />
			<mvc:mapping path="/delivery/**" />
			<mvc:mapping path="/mypage/**" />
			<mvc:mapping path="/buy/**" />
			<mvc:mapping path="/item/**" />
			<mvc:mapping path="/order/**" />
			<mvc:mapping path="/user/**" />

			<mvc:mapping path="/myReview/**" />
			<mvc:mapping path="/reviewdetail/**" />
			<mvc:mapping path="/reviewlist/**" />
			<mvc:mapping path="/reviewinsertf/**" />

			<mvc:mapping path="/qnalist/**" />
			<mvc:mapping path="/qnainsertf/**" />
			<mvc:mapping path="/qnadetail/**" />

			<!-- 인터셉터로 사용할 빈 등록 -->
			<beans:ref bean="loginInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/noticeinsertf/**" />
			<mvc:mapping path="/noticeupdate/**" />
			<mvc:mapping path="/noticeupdatef/**" />

			<mvc:mapping path="/reviewrinsertf/**" />
			<mvc:mapping path="/reviewrupdatef/**" />

			<mvc:mapping path="/qnarinsertf/**" />
			<mvc:mapping path="/qnarupdatef/**" />
			<!-- 인터셉터로 사용할 빈 등록 -->
			<beans:ref bean="AdminloginInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>


	<context:component-scan base-package="com.green.meal"/>

</beans:beans>